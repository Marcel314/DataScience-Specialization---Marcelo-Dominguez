as.vector(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])])
class(as.vector(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])]))
x = as.vector(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])])
help(head)
measures$"Hospital.Name"[!is.na(measures[outcomeColumn])]
measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][5]
measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][5]
as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])[num])
as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn][num])
3
as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])[5])
measures$"Hospital.Name"[!is.na(measures[outcomeColumn])[5]
4
measures$"Hospital.Name"[!is.na(measures[outcomeColumn])
2
measures$"Hospital.Name"[!is.na(measures[outcomeColumn])]
measures$"Hospital.Name"[!is.na(measures[outcomeColumn])]
as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][5])
measures$"Hospital.Name"[!is.na(measures[outcomeColumn])[1]
as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][1])
as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][5])
as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][1])
as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][0])
as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][nrows(measures)])
nrow(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])
2
nrow(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])])
nrow(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])])
nrow(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])])
nrow(measures$"Hospital.Name"[!is.na(measures[])])
nrow(measures)
nrow(measures$"Hospital.Name")
nrow(measures[!is.na(measures[outcomeColumn])]))
nrow(measures[!is.na(measures[outcomeColumn])])
help(tail)
as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][10])
as.character(tail(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][10]))
as.character(tail(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])]))
as.character(tail(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])]))
measures$"Hospital.Name"[!is.na(measures[outcomeColumn])])
measures$"Hospital.Name"[!is.na(measures[outcomeColumn])]
class(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])])
(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])]
s
measures$"Hospital.Name"[!is.na(measures[outcomeColumn])]
as.vector(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])])
rows(as.vector(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])]))
nrow(as.vector(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])]))
measures$"Hospital.Name"[!is.na(measures[outcomeColumn])]
nrows(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])])
nrow(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])])
measures$"Hospital.Name"[!is.na(measures[outcomeColumn])]
measures$"Hospital.Name"[!is.na(measures[outcomeColumn])]
tail(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])],1)
tail(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])],2)
as.character(tail(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][num],1))
measures$"Hospital.Name"[!is.na(measures[outcomeColumn])]
measures$"Hospital.Name"[!is.na(measures[outcomeColumn])]
tail(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])],1)
measures$"Hospital.Name"[!is.na(measures[outcomeColumn])]
as.character(tail(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])],1))
rankhospital <- function(state, outcome, num="best") {
## Read outcome data
measures = read.csv("./in/outcome-of-care-measures.csv", colClasses = "character")
## Check that state, outcome and num parameters are valid
if (!is.element(state,measures[,7])) {
stop("invalid state")
}
if (!is.element(outcome,c('heart attack','heart failure','pneumonia'))) {
stop("invalid outcome")
}
if (!is.element(num,c('best','worst'))) {
if (!suppressWarnings(as.numeric(num)) <= nrow(measures)) {
return(NA)
}
}
## Return hospital name in that state with the given rank 30-day death rate
outcomeColumn = getOutcomeColumn(outcome)
measures <- measures[measures$State==state,]
measures[,outcomeColumn] <- suppressWarnings(as.numeric(measures[,outcomeColumn]))
measures <- measures[order(measures[outcomeColumn], measures$"Hospital.Name"),]
if (num == 'best') {
name = as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][1])
} else if (num == 'worst') {
name = as.character(tail(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])],1))
} else {
name = as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][num])
}
return(name)
}
rankhospital("TX","heart failure",4)
rankhospital("MD","heart attack","worst")
rankhospital("MN", "heart attack", 5000)
rankhospital("MN", "heart attack", 5000)
rankhospital <- function(state, outcome, num="best") {
## Read outcome data
measures = read.csv("./in/outcome-of-care-measures.csv", colClasses = "character")
## Check that state, outcome and num parameters are valid
if (!is.element(state,measures[,7])) {
stop("invalid state")
}
if (!is.element(outcome,c('heart attack','heart failure','pneumonia'))) {
stop("invalid outcome")
}
if (!is.element(num,c('best','worst'))) {
if (!suppressWarnings(as.numeric(num)) <= nrow(measures)) {
return(NA)
} else {
cat('measures = ',measures)
cat('num = ',num)
}
}
## Return hospital name in that state with the given rank 30-day death rate
outcomeColumn = getOutcomeColumn(outcome)
measures <- measures[measures$State==state,]
measures[,outcomeColumn] <- suppressWarnings(as.numeric(measures[,outcomeColumn]))
measures <- measures[order(measures[outcomeColumn], measures$"Hospital.Name"),]
if (num == 'best') {
name = as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][1])
} else if (num == 'worst') {
name = as.character(tail(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])],1))
} else {
name = as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][num])
}
return(name)
}
rankhospital("MN", "heart attack", 5000)
rankhospital("TX", "heart attack", 5000)
rankhospital("MN", "heart attack", 50)
rankhospital("MN", "heart attack", "50")
rankhospital <- function(state, outcome, num="best") {
## Read outcome data
measures = read.csv("./in/outcome-of-care-measures.csv", colClasses = "character")
## Check that state, outcome and num parameters are valid
if (!is.element(state,measures[,7])) {
stop("invalid state")
}
if (!is.element(outcome,c('heart attack','heart failure','pneumonia'))) {
stop("invalid outcome")
}
if (!is.element(num,c('best','worst'))) {
if (!suppressWarnings(as.numeric(num)) <= nrow(measures)) {
return(NA)
} else {
cat('measures = ',measures)
cat('num = ',num)
}
}
## Return hospital name in that state with the given rank 30-day death rate
outcomeColumn = getOutcomeColumn(outcome)
measures <- measures[measures$State==state,]
measures[,outcomeColumn] <- suppressWarnings(as.numeric(measures[,outcomeColumn]))
measures <- measures[order(measures[outcomeColumn], measures$"Hospital.Name"),]
if (num == 'best') {
name = as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][1])
} else if (num == 'worst') {
name = as.character(tail(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])],1))
} else {
name = as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][num])
}
return(name)
}
rankhospital('TX','heart attack',30)
rankhospital <- function(state, outcome, num="best") {
## Read outcome data
measures = read.csv("./in/outcome-of-care-measures.csv", colClasses = "character")
## Check that state, outcome and num parameters are valid
if (!is.element(state,measures[,7])) {
stop("invalid state")
}
if (!is.element(outcome,c('heart attack','heart failure','pneumonia'))) {
stop("invalid outcome")
}
if (!is.element(num,c('best','worst'))) {
if (!suppressWarnings(as.numeric(num)) <= nrow(measures)) {
return(NA)
} else {
cat(measures)
cat(num)
}
}
## Return hospital name in that state with the given rank 30-day death rate
outcomeColumn = getOutcomeColumn(outcome)
measures <- measures[measures$State==state,]
measures[,outcomeColumn] <- suppressWarnings(as.numeric(measures[,outcomeColumn]))
measures <- measures[order(measures[outcomeColumn], measures$"Hospital.Name"),]
if (num == 'best') {
name = as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][1])
} else if (num == 'worst') {
name = as.character(tail(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])],1))
} else {
name = as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][num])
}
return(name)
}
rankhospital('TX','heart attack',30)
rankhospital <- function(state, outcome, num="best") {
## Read outcome data
measures = read.csv("./in/outcome-of-care-measures.csv", colClasses = "character")
## Check that state, outcome and num parameters are valid
if (!is.element(state,measures[,7])) {
stop("invalid state")
}
if (!is.element(outcome,c('heart attack','heart failure','pneumonia'))) {
stop("invalid outcome")
}
if (!is.element(num,c('best','worst'))) {
if (!suppressWarnings(as.numeric(num)) <= nrow(measures)) {
return(NA)
} else {
cat('measures = ',nrow(measures))
cat('num = ',num)
}
}
## Return hospital name in that state with the given rank 30-day death rate
outcomeColumn = getOutcomeColumn(outcome)
measures <- measures[measures$State==state,]
measures[,outcomeColumn] <- suppressWarnings(as.numeric(measures[,outcomeColumn]))
measures <- measures[order(measures[outcomeColumn], measures$"Hospital.Name"),]
if (num == 'best') {
name = as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][1])
} else if (num == 'worst') {
name = as.character(tail(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])],1))
} else {
name = as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][num])
}
return(name)
}
rankhospital('TX','heart attack',30)
getOutcomeColumn <- function(outcome) {
if (outcome == "heart attack") {
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
}
rankhospital('TX','heart attack',30)
rankhospital('TX','heart attack','30')
rankhospital <- function(state, outcome, num="best") {
## Read outcome data
measures = read.csv("./in/outcome-of-care-measures.csv", colClasses = "character")
## Check that state, outcome and num parameters are valid
if (!is.element(state,measures[,7])) {
stop("invalid state")
}
if (!is.element(outcome,c('heart attack','heart failure','pneumonia'))) {
stop("invalid outcome")
}
if (!is.element(num,c('best','worst'))) {
if (!suppressWarnings(as.numeric(num)) <= nrow(measures)) {
return(NA)
} else {
#cat('measures = ',nrow(measures))
#cat('num = ',num)
}
}
## Return hospital name in that state with the given rank 30-day death rate
outcomeColumn = getOutcomeColumn(outcome)
measures <- measures[measures$State==state,]
measures[,outcomeColumn] <- suppressWarnings(as.numeric(measures[,outcomeColumn]))
measures <- measures[order(measures[outcomeColumn], measures$"Hospital.Name"),]
if (num == 'best') {
name = as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][1])
} else if (num == 'worst') {
name = as.character(tail(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])],1))
} else {
name = as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][num])
}
return(name)
}
rankhospital('TX','heart attack',40)
rankhospital('TX','heart attack','best')
rankhospital('TX','heart attack','worst')
rankhospital('TX','heart attack',3)
rankhospital('TX','heart attack',30000)
rankhospital('TX','heart attack',50000)
rankhospital('MN','heart attack',5000)
rankhospital("MN","heart attack",5000)
# DataScience Specialization - R Programming
# Assigment3 - Hospital Quality
# by Marcelo Domínguez
# @_marcelo_d
# Configuration
# - Setting packages and working directory
# - Downloaded raw data and unzip to "./in" folder
setup <- function() {
cat("Setup")
install.packages("downloader")
library(downloader)
sapply(packages, require, character.only=TRUE, quietly=TRUE)
setwd("./")
path = getwd()
path
url = "https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2FProgAssignment3-data.zip"
datasetFile = "assignment-dataset.zip"
download(url, dest=datasetFile, mode="wb")
if (file.exists("./in")) {
unlink("./in",recursive=TRUE,force=TRUE)
} else {
dir.create("./in", showWarnings = FALSE, recursive = FALSE, mode = "0777")
}
unzip(datasetFile, exdir = "./in")
cat("Setup: ok")
}
# Get outcome columnName
getOutcomeColumn <- function(outcome) {
if (outcome == "heart attack") {
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
outcome <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
}
## The function reads the outcome-of-care-measures.csv file and returns a character vector
## with the name of the hospital that has the ranking specified by the num argument.
##
## The num argument can take values “best”, “worst”, or an integer indicating the ranking
## (smaller numbers are better). If the number given by num is larger than the number of
## hospitals in that state, then the function should return NA. Hospitals that do not have
## data on a particular outcome should be excluded from the set of hospitals when deciding the rankings.
rankhospital <- function(state, outcome, num="best") {
## Read outcome data
measures = read.csv("./in/outcome-of-care-measures.csv", colClasses = "character")
## Check that state, outcome and num parameters are valid
if (!is.element(state,measures[,7])) {
stop("invalid state")
}
if (!is.element(outcome,c('heart attack','heart failure','pneumonia'))) {
stop("invalid outcome")
}
if (!is.element(num,c('best','worst'))) {
if (!suppressWarnings(as.numeric(num)) <= nrow(measures)) {
return(NA)
}
}
## Return hospital name in that state with the given rank 30-day death rate
outcomeColumn = getOutcomeColumn(outcome)
measures <- measures[measures$State==state,]
measures[,outcomeColumn] <- suppressWarnings(as.numeric(measures[,outcomeColumn]))
measures <- measures[order(measures[outcomeColumn], measures$"Hospital.Name"),]
if (num == 'best') {
name = as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][1])
} else if (num == 'worst') {
name = as.character(tail(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])],1))
} else {
name = as.character(measures$"Hospital.Name"[!is.na(measures[outcomeColumn])][num])
}
return(name)
}
rankhospital('MN','heart attack',5000)
rankhospital('MN','heart attack',5)
install.packages("swirl")
library("swirl")
install_from_swirl("R Programming")
swirl()
x <- c(44,NA,5,NA)
3 * x
y <- rnorm(1000)
z <- rep(NA,1000)
z
my_data <- sample(c(y,z),100)
my_na <- is.na(my_dat)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
head(flags)
dim(flags)
class(flags)
clas_list <- lapply(flags,class)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
clas_vect <- sapply(cls_list)
clas_vect <- sapply(cls_list,class)
clas_vect <- sapply(flags,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum
)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_map
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
length(unique_vals)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
as.Date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
t1
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
month(t1)
months(t1)
quarters/t2
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3,"%B %d, %Y %H:%M")
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() -t1
difftime(Sys.time(),t1,units = 'days')
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x(x[3],x[5],x[7])
c(x[3],x[5],x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
name(vent)
name(vect)
names(vect)
c(11,2,NA)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(data=1:20,nrow = 4,ncol = 5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data,cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
! 5 == 7
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTrue(6>4)
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
witch(ints,>7)
witch(ints) > 7
which(ints) > 7
which(ints > 7)
any(ints < 0)
all(ints > 0)

{
    "contents" : "# DataScience Specialization - R Programming\n# Assigment3 - Hospital Quality\n# by Marcelo Domínguez\n# @_marcelo_d \n\n\n# Configuration\n# - Setting packages and working directory\n# - Downloaded raw data and unzip to \"./in\" folder\nsetup <- function() {\n  cat(\"Setup\")\n  install.packages(\"downloader\")\n  library(downloader)\n  sapply(packages, require, character.only=TRUE, quietly=TRUE)\n  setwd(\"./\")\n  path = getwd()\n  path\n  url = \"https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2FProgAssignment3-data.zip\"\n  datasetFile = \"assignment-dataset.zip\"\n  download(url, dest=datasetFile, mode=\"wb\") \n  if (file.exists(\"./in\")) {\n    unlink(\"./in\",recursive=TRUE,force=TRUE)\n  } else {\n    dir.create(\"./in\", showWarnings = FALSE, recursive = FALSE, mode = \"0777\")\n  }\n  unzip(datasetFile, exdir = \"./in\")\n  cat(\"Setup: ok\")\n}\n\n# Get outcome columnName\ngetOutcomeColumn <- function(outcome) {\n  if (outcome == \"heart attack\") {\n    outcome <- \"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack\"\n  } else if (outcome == \"heart failure\") {\n    outcome <- \"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure\"\n  } else if (outcome == \"pneumonia\") {\n    outcome <- \"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia\"\n  }\n}\n\n## The function reads the outcome-of-care-measures.csv file and returns a character vector \n## with the name of the hospital that has the ranking specified by the num argument. \n## \n## The num argument can take values “best”, “worst”, or an integer indicating the ranking \n## (smaller numbers are better). If the number given by num is larger than the number of \n## hospitals in that state, then the function should return NA. Hospitals that do not have \n## data on a particular outcome should be excluded from the set of hospitals when deciding the rankings.\nrankhospital <- function(state, outcome, num=\"best\") {\n  \n  ## Read outcome data\n  measures = read.csv(\"./in/outcome-of-care-measures.csv\", colClasses = \"character\")\n  \n  ## Check that state, outcome and num parameters are valid\n  if (!is.element(state,measures[,7])) {\n    stop(\"invalid state\")\n  }\n  if (!is.element(outcome,c('heart attack','heart failure','pneumonia'))) {\n    stop(\"invalid outcome\")\n  }\n  if (!is.element(num,c('best','worst'))) {\n    if (!suppressWarnings(as.numeric(num)) <= nrow(measures)) {\n      return(NA)\n    } \n  } \n  \n  ## Return hospital name in that state with the given rank 30-day death rate\n  outcomeColumn = getOutcomeColumn(outcome)\n  measures <- measures[measures$State==state,]\n  measures[,outcomeColumn] <- suppressWarnings(as.numeric(measures[,outcomeColumn]))\n  measures <- measures[order(measures[outcomeColumn], measures$\"Hospital.Name\"),]\n  if (num == 'best') {\n    name = as.character(measures$\"Hospital.Name\"[!is.na(measures[outcomeColumn])][1])\n  } else if (num == 'worst') {\n    name = as.character(tail(measures$\"Hospital.Name\"[!is.na(measures[outcomeColumn])],1))\n  } else {\n    name = as.character(measures$\"Hospital.Name\"[!is.na(measures[outcomeColumn])][num])\n  }\n  return(name)\n}\n\n\n",
    "created" : 1427407322495.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "9|21|27|0|\n30|39|38|0|\n47|54|78|0|\n",
    "hash" : "276193816",
    "id" : "9FEFBF5B",
    "lastKnownWriteTime" : 1427407706,
    "path" : "~/Projects/datascience-specialization/GitHub-Repos/DS02-R-Programming/ProgrammingAssignment3/rankhospital.R",
    "project_path" : "rankhospital.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}